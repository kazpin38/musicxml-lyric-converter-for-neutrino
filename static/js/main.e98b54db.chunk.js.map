{"version":3,"sources":["lib/lyricmap.ts","components/ScoreInfo.tsx","lib/musicxml.ts","components/DropArea.tsx","components/ScoreInput.tsx","components/ScoreResult.tsx","components/ScoreParsing.tsx","components/GithubButton.tsx","components/Header.tsx","components/Footer.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultLyricMap","a","ah","i","u","e","o","oh","ka","ki","ku","ke","ko","ga","gi","gu","ge","go","sa","si","su","se","so","za","zi","zu","ze","zo","ta","ti","tu","tun","te","to","da","di","du","dun","de","do","doo","dm","na","ni","nu","ne","no","fa","fi","fu","foo","fe","fo","fon","ha","hi","hu","he","ho","ba","bi","bu","be","bo","pa","pan","pi","pu","pe","pon","ma","mi","mu","me","mo","ya","yi","yu","ye","yo","ra","ri","ru","re","ro","la","li","lu","le","lo","wa","wu","we","wo","whoo","woo","wow","woh","wan","n","useStyles","makeStyles","container","width","height","margin","maxHeight","alphabetRe","RegExp","ScoreInfoWrapper","styled","div","ErrorText","BasicInfo","Row","TableText","Typography","attrs","variant","TableText2","Name","Value","ScoreInfo","props","styles","score","onError","React","mapper","setMapper","lyrics","setLyrics","alphabetLyrics","measures","result","forEach","measure","parts","Object","entries","note","undefined","Array","isArray","lyric","lyricParts","lp","data","d","String","includes","push","extractLyrics","filter","l","test","sort","b","mapByDefault","fromEntries","map","onMapperChange","key","value","_mapper","Paper","sc","v","work","workTitle","partList","length","TableContainer","className","Table","stickyHeader","aria-label","size","TableHead","TableRow","TableCell","TableBody","hover","role","tabIndex","TextField","onChange","target","Button","color","onClick","onMap","DropAreaWrapper","DropArea","onAccept","options","onDrop","acceptedFiles","file","reader","FileReader","onabort","console","log","onerror","onload","resultStr","readAsText","useDropzone","getRootProps","getInputProps","ScoreInputWrapper","ScoreInput","isError","onParse","Text","ScoreResultWrapper","ScoreResult","onDownload","blob","Blob","resultXml","type","saveAs","text","ScoreParsing","GithubButtonWrapper","GithubButton","src","frameBorder","scrolling","title","Wrapper","Container","Title","SubTitle","Description","Header","Link","Footer","href","rel","MainWrapper","ResetButton","Main","inputXml","setInputXml","parsing","setParsing","setIsError","setScore","setResultXml","onReset","Promise","resolve","reject","parseScore","parseScorePromise","then","catch","finally","k","replace","mapTextLyrics","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kdAEaA,EAA4B,CACvCC,EAAG,SACHC,GAAI,eACJC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,GAAI,eACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,eACJC,GAAI,eACJC,IAAK,qBACLC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,eACJC,GAAI,eACJC,IAAK,qBACLC,GAAI,SACJC,GAAI,SACJC,IAAK,qBACLC,GAAI,qBACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,eACJC,GAAI,eACJC,GAAI,SACJC,IAAK,eACLC,GAAI,eACJC,GAAI,eACJC,IAAK,qBACLC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,IAAK,eACLC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,IAAK,eACLC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,eACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,eACJC,GAAI,SACJC,KAAM,eACNC,IAAK,eACLC,IAAK,qBACLC,IAAK,qBACLC,IAAK,eACLC,EAAG,U,kwBCpFL,IAAMC,EAAYC,YAAW,CAC3BC,UAAW,CACTC,MAAO,MACPC,OAAQ,QACRC,OAAQ,aACRC,UAAW,OAUTC,EAAa,IAAIC,OAAO,eAoGxBC,EAAmBC,IAAOC,IAAV,KAKhBC,EAAYF,IAAOC,IAAV,KAETE,EAAYH,IAAOC,IAAV,KAKTG,EAAMJ,IAAOC,IAAV,KAIHI,EAAYL,YAAOM,KAAYC,MAAM,CACzCC,QAAS,SADOR,CAAH,KAMTS,EAAaT,YAAOM,KAAYC,MAAM,CAC1CC,QAAS,SADQR,CAAH,KAMVU,EAAOV,YAAOM,KAAYC,MAAM,CACpCC,QAAS,SADER,CAAH,KAKJW,EAAQX,YAAOM,KAAYC,MAAM,CACrCC,QAAS,SADGR,CAAH,KAIIY,EAvI6B,SAAAC,GAAU,IAAD,QAC7CC,EAASxB,IACPyB,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,QAFoC,EAGvBC,WAAyB/H,GAHF,mBAG5CgI,EAH4C,KAGpCC,EAHoC,OAIvBF,WAAyB,IAJF,mBAI5CG,EAJ4C,KAIpCC,EAJoC,KAMnDJ,aAAgB,WACd,GAAc,OAAVF,EACJ,IACE,IAAMO,EC3BiB,SAACP,GAA0B,IAC9CQ,EAAaR,EAAbQ,SAEFC,EAAmB,GA4CzB,OA1CAD,EAASE,SAAQ,SAAAC,GAAY,IACnBC,EAAUD,EAAVC,MACRC,OAAOC,QAAQF,GAAOF,SAAQ,YAAuB,IAAD,6BAC7CA,SAAQ,SAAAK,GACX,GAAoB,kBAATA,EAAX,CADmB,IAKXV,EAAWU,EAAXV,YACOW,IAAXX,GAAyBY,MAAMC,QAAQb,IAI3CA,EAAOK,SAAQ,SAAAS,GACb,GAAqB,kBAAVA,EAAX,CADsB,IAIdC,EAAeD,EAAfC,gBACWJ,IAAfI,GAA6BH,MAAMC,QAAQE,IAI/CA,EAAWV,SAAQ,SAAAW,GACjB,GAAkB,kBAAPA,EAAX,CADuB,IAKfC,EAASD,EAATC,KACR,QAAaN,IAATM,GAA+B,IAATA,EAA1B,CAIA,IAAMC,EAAIC,OAAOF,GACZb,EAAOgB,SAASF,IACnBd,EAAOiB,KAAKH,sBAQjBd,EDpBoBkB,CAAc3B,GAClC4B,QAAO,SAAAC,GAAC,OAAI/C,EAAWgD,KAAKD,MAC5BE,MAAK,SAAC3J,EAAG4J,GAAJ,OAAWC,EAAa7J,GAAK6J,EAAaD,IAAM,EAAI,KAE5D1B,EAAUC,GACVH,EACES,OAAOqB,YAAY3B,EAAe4B,KAAI,SAAAN,GAAC,MAAI,CAACA,EAAGI,EAAaJ,SAE9D,SACO,OAAP5B,QAAO,IAAPA,UAED,CAACA,EAASD,IAEb,IAAMoC,EAAiBlC,eAAkB,SAACmC,EAAaC,GACrDlC,GAAU,SAAAmC,GACR,OAAO,eACFA,EADL,eAEGF,EAAMC,SAGV,IAEH,GAAoB,OAAhBxC,EAAME,MACR,OACE,gBAACwC,EAAA,EAAD,KACE,gBAACxD,EAAD,KACE,gBAACG,EAAD,+IAMR,IAAMsD,EAAK3C,EAAME,MACXiC,EAAe,SAACS,GAAD,uBAAevK,EAAgBuK,UAA/B,QAAqCA,GAE1D,OACE,gBAACF,EAAA,EAAD,KACE,gBAACxD,EAAD,KACE,gBAACI,EAAD,KACE,gBAACC,EAAD,KACE,gBAACM,EAAD,iCACA,gBAACC,EAAD,sBAAQ6C,QAAR,IAAQA,OAAR,YAAQA,EAAIE,YAAZ,aAAQ,EAAUC,iBAAlB,QAA+B,yCAEjC,gBAACvD,EAAD,KACE,gBAACM,EAAD,iCACA,gBAACC,EAAD,sBAAQ6C,QAAR,IAAQA,OAAR,YAAQA,EAAII,gBAAZ,aAAQ,EAAcC,cAAtB,QAAgC,kBAGpC,gBAACxD,EAAD,iFACA,gBAACI,EAAD,mGACA,gBAACqD,EAAA,EAAD,CAAgBC,UAAWjD,EAAOtB,WAChC,gBAACwE,EAAA,EAAD,CAAOC,cAAY,EAACC,aAAW,eAAeC,KAAK,SACjD,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,4BACA,gBAACA,EAAA,EAAD,8BAGJ,gBAACC,EAAA,EAAD,KACGnD,EAAO8B,KAAI,SAAAhB,GAAU,IAAD,EACnB,OACE,gBAACmC,EAAA,EAAD,CAAUG,OAAK,EAACC,KAAK,WAAWC,UAAW,EAAGtB,IAAKlB,GACjD,gBAACoC,EAAA,EAAD,KAAYpC,GACZ,gBAACoC,EAAA,EAAD,KACE,gBAACK,EAAA,EAAD,CACEnE,QAAQ,WACR6C,MAAK,UAAEnC,EAAOgB,UAAT,QAAmBA,EACxB0C,SAAU,SAAArL,GAAC,OAAI4J,EAAejB,EAAO3I,EAAEsL,OAAOxB,QAC9Cc,KAAK,kBASrB,gBAACW,EAAA,EAAD,CACEtE,QAAQ,YACRuE,MAAM,UACNC,QAAS,kBAAMnE,EAAMoE,MAAM/D,KAH7B,oB,2ME1GR,IA2CMgE,EAAkBlF,IAAOC,IAAV,KAQNkF,EAnD2B,SAAAtE,GAAU,IAC1CuE,EAAsBvE,EAAtBuE,SAAUpE,EAAYH,EAAZG,QAwBZqE,EAA2B,CAC/BC,OAvB4BrE,eAC5B,SAAAsE,GACEA,EAAc9D,SAAQ,SAAA+D,GACpB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,WACR,OAAP9E,QAAO,IAAPA,QAEFyE,EAAOM,OAAS,WACd,IAAMC,EAAYP,EAAOjE,OAEA,kBAAdwE,GACTZ,EAASY,IAGbP,EAAOQ,WAAWT,QAGtB,CAACJ,EAAUpE,KAtBoC,EAiCTkF,YAAYb,GAA5Cc,EAjCyC,EAiCzCA,aAAcC,EAjC2B,EAiC3BA,cAEtB,OACE,gBAAClB,EAAoBiB,IACnB,wBAAWC,KACX,2L,0MC1CN,IAYMC,EAAoBrG,IAAOC,IAAV,KAIjBC,EAAYF,YAAOM,KAAYC,MAAM,CACzCC,QAAS,WADOR,CAAH,KAOAsG,EAvB+B,SAAAzF,GAC5C,OACE,gBAAC0C,EAAA,EAAD,KACE,gBAAC8C,EAAD,KACE,gBAAC/F,EAAA,EAAD,CAAYE,QAAQ,SAApB,wEACCK,EAAM0F,SAAW,gBAAC,EAAD,yDAClB,gBAAC,EAAD,CAAUnB,SAAUvE,EAAM2F,a,2OCLlC,IAsBMC,GAAOzG,YAAOM,KAAYC,MAAM,CACpCC,QAAS,SADER,CAAH,MAMJ0G,GAAqB1G,IAAOC,IAAV,MAKT0G,GAjCiC,SAAA9F,GAC9C,IAAM+F,EAAa3F,eAAkB,WACnC,IAAM4F,EAAO,IAAIC,KAAK,CAACjG,EAAMkG,WAAY,CACvCC,KAAM,2CAERC,kBAAOJ,EAAM,qBACZ,CAAChG,EAAMkG,YAEV,OACE,gBAACxD,EAAA,EAAD,KACE,gBAACmD,GAAD,KACE,gBAACD,GAAD,uCACA,gBAAC,KAAD,CAAiBS,KAAMrG,EAAMkG,WAC3B,gBAACjC,EAAA,EAAD,CAAQtE,QAAQ,YAAYuE,MAAM,UAAUC,QAAS4B,GAArD,4CCVKO,GARmC,WAChD,OACE,gBAAC5D,EAAA,EAAD,KACE,gBAACjD,EAAA,EAAD,gC,8FCNN,IAeM8G,GAAsBpH,IAAOC,IAAV,MAIVoH,GAnBoB,WACjC,OACE,gBAACD,GAAD,KACE,0BACEE,IAAI,qHACJC,YAAY,IACZC,UAAU,IACV/H,MAAM,QACNC,OAAO,OACP+H,MAAM,oB,6cCJd,IAgBMC,GAAU1H,YAAO2H,IAAP3H,CAAH,MAKP4H,GAAQ5H,YAAOM,KAAYC,MAAM,CACrCC,QAAS,MADGR,CAAH,MAKL6H,GAAW7H,YAAOM,KAAYC,MAAM,CACxCC,QAAS,aADMR,CAAH,MAMR8H,GAAc9H,YAAOM,KAAYC,MAAM,CAC3CC,QAAS,SADSR,CAAH,MASF+H,GAzCuB,WACpC,OACE,gBAACL,GAAD,KACE,gBAACE,GAAD,sDACA,gBAACC,GAAD,4BAEA,gBAAC,GAAD,MACA,gBAACC,GAAD,KAEI,8b,iNCXV,IAcMJ,GAAU1H,YAAO2H,IAAP3H,CAAH,MAKPgI,GAAOhI,IAAO7G,EAAV,MAIK8O,GAvBuB,WACpC,OACE,gBAAC,GAAD,KACE,gBAACD,GAAD,CACEE,KAAK,yBACLrD,OAAO,SACPsD,IAAI,uBAEJ,gBAAC7H,EAAA,EAAD,CAAYE,QAAQ,aAApB,8C,8PCER,IA4DM4H,GAAcpI,IAAOC,IAAV,MAQXoI,GAAcrI,YAAO8E,IAAP9E,CAAH,MAIFsI,GAxEmB,WAAO,IAAD,EACNrH,WAAuB,IADjB,mBAC/BsH,EAD+B,KACrBC,EADqB,OAERvH,YAAe,GAFP,mBAE/BwH,EAF+B,KAEtBC,EAFsB,OAGRzH,YAAe,GAHP,mBAG/BsF,EAH+B,KAGtBoC,EAHsB,OAIZ1H,WAAqC,MAJzB,mBAI/BF,EAJ+B,KAIxB6H,EAJwB,OAKJ3H,WAAuB,IALnB,mBAK/B8F,EAL+B,KAKpB8B,EALoB,KA2BhC7H,EAAUC,eAAkB,WAChC0H,GAAW,GACXC,EAAS,QACR,IAEGE,EAAU7H,eAAkB,WAChC0H,GAAW,GACXC,EAAS,MACTJ,EAAY,IACZK,EAAa,IACbH,GAAW,KACV,IAEH,OACE,gBAACf,EAAA,EAAD,KACE,gBAAC,GAAD,MACA,gBAACS,GAAD,KACa,OAAVrH,GAAkB,gBAAC,EAAD,CAAYyF,QArCpB,SAACU,GAChBsB,EAAYtB,GACZwB,GAAW,GRtBkB,SAC/BxB,GAEA,OAAO,IAAI6B,SAA8B,SAACC,EAASC,GACjD,IAEED,EADeE,qBAAWhC,IAE1B,SACA+B,QQeFE,CAAkBjC,GACfkC,MAAK,SAAA5H,GACJoH,EAASpH,MAEV6H,OAAM,WACLV,GAAW,MAEZW,SAAQ,WACPZ,GAAW,OA0BuCnC,QAASA,IAChD,OAAVxF,GAAkB0H,GAAW,gBAAC,GAAD,MACnB,OAAV1H,GACC,gBAAC,EAAD,CAAWA,MAAOA,EAAOkE,MAzBnB,SAAC/D,GACRH,GACL8H,ERiGyB,SAAC3B,EAAchG,GAG1C,IAFA,IAAIM,EAAS0F,EAEb,MAAqBtF,OAAOC,QAAQX,GAApC,eAA6C,CAAC,IAAD,sBAAjCqI,EAAiC,KAA9B9F,EAA8B,KACrCpF,EAAK,IAAIyB,OAAJ,gBAAoByJ,EAApB,WAAgC,KAC3C/H,EAASA,EAAOgI,QAAQnL,EAAf,gBAA4BoF,EAA5B,YAGX,OAAOjC,EQzGQiI,CAAclB,EAAUrH,KAuBQF,QAASA,IAEjD+F,GAAa,gBAAC,GAAD,CAAaA,UAAWA,IACtC,gBAACsB,GAAD,CAAa7H,QAAQ,YAAYuE,MAAM,UAAUC,QAAS8D,GAA1D,6BAKF,gBAAC,GAAD,QC5DSY,OARf,WACE,OACE,yBAAK3F,UAAU,OACb,kBAAC,GAAD,QCMc4F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACL7E,QAAQ6E,MAAMA,EAAMC,c","file":"static/js/main.e98b54db.chunk.js","sourcesContent":["export type LyricMap = { [v: string]: string };\n\nexport const defaultLyricMap: LyricMap = {\n  a: 'あ',\n  ah: 'あー',\n  i: 'い',\n  u: 'う',\n  e: 'え',\n  o: 'お',\n  oh: 'おー',\n  ka: 'か',\n  ki: 'き',\n  ku: 'く',\n  ke: 'け',\n  ko: 'こ',\n  ga: 'が',\n  gi: 'ぎ',\n  gu: 'ぐ',\n  ge: 'げ',\n  go: 'ご',\n  sa: 'さ',\n  si: 'し',\n  su: 'す',\n  se: 'せ',\n  so: 'そ',\n  za: 'ざ',\n  zi: 'じ',\n  zu: 'ず',\n  ze: 'ぜ',\n  zo: 'ぞ',\n  ta: 'た',\n  ti: 'てぃ',\n  tu: 'とぅ',\n  tun: 'とぅん',\n  te: 'て',\n  to: 'と',\n  da: 'だ',\n  di: 'でぃ',\n  du: 'どぅ',\n  dun: 'どぅん',\n  de: 'で',\n  do: 'ど',\n  doo: 'どぅー',\n  dm: 'どぅん',\n  na: 'な',\n  ni: 'に',\n  nu: 'ぬ',\n  ne: 'ね',\n  no: 'の',\n  fa: 'ふぁ',\n  fi: 'ふぃ',\n  fu: 'ふ',\n  foo: 'ふー',\n  fe: 'ふぇ',\n  fo: 'ふぉ',\n  fon: 'ふぉん',\n  ha: 'は',\n  hi: 'ひ',\n  hu: 'ふ',\n  he: 'へ',\n  ho: 'ほ',\n  ba: 'ば',\n  bi: 'び',\n  bu: 'ぶ',\n  be: 'べ',\n  bo: 'ぼ',\n  pa: 'ぱ',\n  pan: 'ぱん',\n  pi: 'ぴ',\n  pu: 'ぷ',\n  pe: 'ぺ',\n  pon: 'ぽん',\n  ma: 'ま',\n  mi: 'み',\n  mu: 'む',\n  me: 'め',\n  mo: 'も',\n  ya: 'や',\n  yi: 'い',\n  yu: 'ゆ',\n  ye: 'いぇ',\n  yo: 'よ',\n  ra: 'ら',\n  ri: 'り',\n  ru: 'る',\n  re: 'れ',\n  ro: 'ろ',\n  la: 'ら',\n  li: 'り',\n  lu: 'る',\n  le: 'れ',\n  lo: 'ろ',\n  wa: 'わ',\n  wu: 'う',\n  we: 'うぇ',\n  wo: 'を',\n  whoo: 'ふー',\n  woo: 'うー',\n  wow: 'うぉう',\n  woh: 'うぉー',\n  wan: 'わん',\n  n: 'ん',\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ScoreTimewise } from 'musicxml-interfaces';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { extractLyrics } from '../lib/musicxml';\nimport { defaultLyricMap, LyricMap } from '../lib/lyricmap';\n\nconst useStyles = makeStyles({\n  container: {\n    width: '50%',\n    height: '40rem',\n    margin: '0 25% 1rem',\n    maxHeight: 250,\n  },\n});\n\ninterface ScoreInfoProps {\n  score: ScoreTimewise | null;\n  onMap: (mapper: LyricMap) => void;\n  onError?: () => void;\n}\n\nconst alphabetRe = new RegExp(/^[a-zA-Z]+$/);\n\nconst ScoreInfo: React.FC<ScoreInfoProps> = props => {\n  const styles = useStyles();\n  const { score, onError } = props;\n  const [mapper, setMapper] = React.useState<LyricMap>(defaultLyricMap);\n  const [lyrics, setLyrics] = React.useState<string[]>([]);\n\n  React.useEffect(() => {\n    if (score === null) return;\n    try {\n      const alphabetLyrics = extractLyrics(score)\n        .filter(l => alphabetRe.test(l))\n        .sort((a, b) => (mapByDefault(a) < mapByDefault(b) ? -1 : 1));\n\n      setLyrics(alphabetLyrics);\n      setMapper(\n        Object.fromEntries(alphabetLyrics.map(l => [l, mapByDefault(l)]))\n      );\n    } catch {\n      onError?.();\n    }\n  }, [onError, score]);\n\n  const onMapperChange = React.useCallback((key: string, value: string) => {\n    setMapper(_mapper => {\n      return {\n        ..._mapper,\n        [key]: value,\n      };\n    });\n  }, []);\n\n  if (props.score === null) {\n    return (\n      <Paper>\n        <ScoreInfoWrapper>\n          <ErrorText>楽譜が読み込まれていないか、不正な形式です。</ErrorText>\n        </ScoreInfoWrapper>\n      </Paper>\n    );\n  }\n\n  const sc = props.score;\n  const mapByDefault = (v: string) => defaultLyricMap[v] ?? v;\n\n  return (\n    <Paper>\n      <ScoreInfoWrapper>\n        <BasicInfo>\n          <Row>\n            <Name>タイトル</Name>\n            <Value>{sc?.work?.workTitle ?? 'タイトルなし'}</Value>\n          </Row>\n          <Row>\n            <Name>パート数</Name>\n            <Value>{sc?.partList?.length ?? '不明'}</Value>\n          </Row>\n        </BasicInfo>\n        <TableText>以下の歌詞を変換します。</TableText>\n        <TableText2>入力欄で変換先を編集できます。</TableText2>\n        <TableContainer className={styles.container}>\n          <Table stickyHeader aria-label='sticky table' size='small'>\n            <TableHead>\n              <TableRow>\n                <TableCell> 変換前</TableCell>\n                <TableCell> 変換後</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {lyrics.map(lyric => {\n                return (\n                  <TableRow hover role='checkbox' tabIndex={-1} key={lyric}>\n                    <TableCell>{lyric}</TableCell>\n                    <TableCell>\n                      <TextField\n                        variant='outlined'\n                        value={mapper[lyric] ?? lyric}\n                        onChange={e => onMapperChange(lyric, e.target.value)}\n                        size='small'\n                      />\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={() => props.onMap(mapper)}\n        >\n          変換!\n        </Button>\n      </ScoreInfoWrapper>\n    </Paper>\n  );\n};\n\nconst ScoreInfoWrapper = styled.div`\n  margin-top: 4rem;\n  padding: 2rem 0;\n`;\n\nconst ErrorText = styled.div``;\n\nconst BasicInfo = styled.div`\n  width: 60%;\n  margin: 1rem auto;\n`;\n\nconst Row = styled.div`\n  width: 100%;\n  display: flex;\n`;\nconst TableText = styled(Typography).attrs({\n  variant: 'body1',\n})`\n  width: 100%;\n  margin: 0.5rem 0;\n`;\nconst TableText2 = styled(Typography).attrs({\n  variant: 'body2',\n})`\n  width: 100%;\n  margin: 0.3rem 0 1rem;\n`;\nconst Name = styled(Typography).attrs({\n  variant: 'body1',\n})`\n  width: 20%;\n`;\nconst Value = styled(Typography).attrs({\n  variant: 'body1',\n})``;\n\nexport default ScoreInfo;\n","import { ScoreTimewise, parseScore } from 'musicxml-interfaces';\nimport { LyricMap } from './lyricmap';\n\nexport const parseScorePromise = (\n  text: string\n): Promise<ScoreTimewise | null> => {\n  return new Promise<ScoreTimewise | null>((resolve, reject) => {\n    try {\n      const result = parseScore(text);\n      resolve(result);\n    } catch {\n      reject();\n    }\n  });\n};\n\nexport const extractLyrics = (score: ScoreTimewise) => {\n  const { measures } = score;\n\n  const result: string[] = [];\n\n  measures.forEach(measure => {\n    const { parts } = measure;\n    Object.entries(parts).forEach(([partName, part]) => {\n      part.forEach(note => {\n        if (typeof note !== 'object') {\n          return;\n        }\n\n        const { lyrics } = note;\n        if (lyrics === undefined || !Array.isArray(lyrics)) {\n          return;\n        }\n\n        lyrics.forEach(lyric => {\n          if (typeof lyric !== 'object') {\n            return;\n          }\n          const { lyricParts } = lyric;\n          if (lyricParts === undefined || !Array.isArray(lyricParts)) {\n            return;\n          }\n\n          lyricParts.forEach(lp => {\n            if (typeof lp !== 'object') {\n              return;\n            }\n\n            const { data } = lp;\n            if (data === undefined || data === 0) {\n              return;\n            }\n\n            const d = String(data);\n            if (!result.includes(d)) {\n              result.push(d);\n            }\n          });\n        });\n      });\n    });\n  });\n\n  return result;\n};\n\nexport const mapLyrics = (score: ScoreTimewise, mapper: LyricMap) => {\n  const { measures } = score;\n\n  const result = {\n    ...score,\n    measures: measures.map(measure => {\n      const { parts } = measure;\n\n      return {\n        ...measure,\n        parts: Object.fromEntries(\n          Object.entries(parts).map(([partName, part]) => {\n            return [\n              partName,\n              part.map(note => {\n                if (typeof note !== 'object') {\n                  return note;\n                }\n\n                const { lyrics } = note;\n                if (lyrics === undefined || !Array.isArray(lyrics)) {\n                  return note;\n                }\n\n                return {\n                  ...note,\n                  lyrics: lyrics.map(lyric => {\n                    if (typeof lyric !== 'object') {\n                      return lyric;\n                    }\n                    const { lyricParts } = lyric;\n                    if (\n                      lyricParts === undefined ||\n                      !Array.isArray(lyricParts)\n                    ) {\n                      return lyric;\n                    }\n\n                    return {\n                      ...lyric,\n                      lyricParts: lyricParts.map(lp => {\n                        if (typeof lp !== 'object') {\n                          return lp;\n                        }\n\n                        const { data } = lp;\n                        if (data === undefined || data === 0) {\n                          return lp;\n                        }\n\n                        const d = String(data);\n\n                        return {\n                          ...lp,\n                          data: mapper[d] ?? d,\n                        };\n                      }),\n                    };\n                  }),\n                };\n              }),\n            ];\n          })\n        ),\n      };\n    }),\n  };\n\n  return result;\n};\n\nexport const mapTextLyrics = (text: string, mapper: LyricMap) => {\n  let result = text;\n\n  for (const [k, v] of Object.entries(mapper)) {\n    const re = new RegExp(`<text>${k}</text>`, 'g');\n    result = result.replace(re, `<text>${v}</text>`);\n  }\n\n  return result;\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { useDropzone, DropzoneOptions, DropEvent } from 'react-dropzone';\n\ntype onDropHandler = <T extends File>(\n  acceptedFiles: T[],\n  rejectedFiles: T[],\n  event: DropEvent\n) => void;\n\ninterface DropAreaProps {\n  onAccept: (text: string) => void;\n  onError?: () => void;\n}\nconst DropArea: React.FC<DropAreaProps> = props => {\n  const { onAccept, onError } = props;\n\n  const onDrop: onDropHandler = React.useCallback(\n    acceptedFiles => {\n      acceptedFiles.forEach(file => {\n        const reader = new FileReader();\n\n        reader.onabort = () => console.log('file reading was aborted');\n        reader.onerror = () => {\n          onError?.();\n        };\n        reader.onload = () => {\n          const resultStr = reader.result;\n\n          if (typeof resultStr === 'string') {\n            onAccept(resultStr);\n          }\n        };\n        reader.readAsText(file);\n      });\n    },\n    [onAccept, onError]\n  );\n\n  const options: DropzoneOptions = {\n    onDrop,\n    // accept: [\n    //   'application/vnd.recordare.musicxml+xml,',\n    //   'application/vnd.recordare.musicxml',\n    // ],\n  };\n\n  const { getRootProps, getInputProps } = useDropzone(options);\n\n  return (\n    <DropAreaWrapper {...getRootProps()}>\n      <input {...getInputProps()} />\n      <p>ここにドラッグ＆ドロップするか、クリックしてください</p>\n    </DropAreaWrapper>\n  );\n};\n\nconst DropAreaWrapper = styled.div`\n  width: 50%;\n  margin: 2rem auto;\n  padding: 5rem 0;\n  border-radius: 1rem;\n  border: rgba(0, 0, 0, 0.25) 1px dotted;\n`;\n\nexport default DropArea;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport DropArea from './DropArea';\n\ninterface ScoreInputProps {\n  onParse: (text: string) => void;\n  isError?: boolean;\n}\nconst ScoreInput: React.FC<ScoreInputProps> = props => {\n  return (\n    <Paper>\n      <ScoreInputWrapper>\n        <Typography variant='body1'>MusicXMLを読み込んでください</Typography>\n        {props.isError && <ErrorText>不正な形式です。</ErrorText>}\n        <DropArea onAccept={props.onParse} />\n      </ScoreInputWrapper>\n    </Paper>\n  );\n};\n\nconst ScoreInputWrapper = styled.div`\n  padding: 2rem 0;\n`;\n\nconst ErrorText = styled(Typography).attrs({\n  variant: 'caption',\n})`\n  color: #ff0000;\n  margin: '1rem 0';\n`;\n\nexport default ScoreInput;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { saveAs } from 'file-saver';\n\ninterface ScoreResultProps {\n  resultXml: string;\n}\nconst ScoreResult: React.FC<ScoreResultProps> = props => {\n  const onDownload = React.useCallback(() => {\n    const blob = new Blob([props.resultXml], {\n      type: 'application/vnd.recordare.musicxml+xml',\n    });\n    saveAs(blob, 'result.musicxml');\n  }, [props.resultXml]);\n\n  return (\n    <Paper>\n      <ScoreResultWrapper>\n        <Text>変換完了！</Text>\n        <CopyToClipboard text={props.resultXml}>\n          <Button variant='contained' color='primary' onClick={onDownload}>\n            ダウンロード\n          </Button>\n        </CopyToClipboard>\n      </ScoreResultWrapper>\n    </Paper>\n  );\n};\n\nconst Text = styled(Typography).attrs({\n  variant: 'body1',\n})`\n  margin: 0 0 1rem;\n`;\n\nconst ScoreResultWrapper = styled.div`\n  margin: 3rem 0;\n  padding: 2rem 0;\n`;\n\nexport default ScoreResult;\n","import * as React from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\ninterface ScoreParsingProps {}\nconst ScoreParsing: React.FC<ScoreParsingProps> = () => {\n  return (\n    <Paper>\n      <Typography>解析中...</Typography>\n    </Paper>\n  );\n};\n\nexport default ScoreParsing;\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nconst GithubButton: React.FC<{}> = () => {\n  return (\n    <GithubButtonWrapper>\n      <iframe\n        src='https://ghbtns.com/github-btn.html?user=nerikosans&repo=musicxml-lyric-converter-for-neutrino&type=star&count=true'\n        frameBorder='0'\n        scrolling='0'\n        width='160px'\n        height='30px'\n        title='github-button'\n      ></iframe>\n    </GithubButtonWrapper>\n  );\n};\n\nconst GithubButtonWrapper = styled.div`\n  margin-top: 1rem;\n`;\n\nexport default GithubButton;\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nimport Container from '@material-ui/core/Container';\nimport { Typography } from '@material-ui/core';\nimport GithubButton from './GithubButton';\n\ninterface HeaderProps {}\nconst Header: React.FC<HeaderProps> = () => {\n  return (\n    <Wrapper>\n      <Title>MusicXML変換くん for NEUTRINO</Title>\n      <SubTitle>Author: @nerikosans</SubTitle>\n\n      <GithubButton />\n      <Description>\n        {\n          'musicxmlに含まれるアルファベットの歌詞をひらがな表記に変換して、NEUTRINOで読み込めるようにします。\\n開発は非公式であり、NEUTRINO本体の開発元とは関係しておりません。'\n        }\n      </Description>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Container)`\n  margin: 3rem 0 1rem;\n  text-align: center;\n`;\n\nconst Title = styled(Typography).attrs({\n  variant: 'h4',\n})`\n  color: #ffffff;\n`;\nconst SubTitle = styled(Typography).attrs({\n  variant: 'subtitle1',\n})`\n  color: #ffffff;\n`;\n\nconst Description = styled(Typography).attrs({\n  variant: 'body2',\n})`\n  color: #ffffff;\n  margin: 1rem auto 0;\n  width: 60%;\n  white-space: pre-line;\n`;\n\nexport default Header;\n","import * as React from 'react';\nimport styled from 'styled-components';\n\nimport Container from '@material-ui/core/Container';\nimport { Typography } from '@material-ui/core';\ninterface FooterProps {}\nconst Footer: React.FC<FooterProps> = () => {\n  return (\n    <Wrapper>\n      <Link\n        href='https://n3utrino.work/'\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        <Typography variant='subtitle1'>NEUTRINO 公式ページ</Typography>\n      </Link>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Container)`\n  margin-top: 3rem;\n  text-align: center;\n`;\n\nconst Link = styled.a`\n  color: #ffffff;\n`;\n\nexport default Footer;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\n\nimport { ScoreTimewise } from 'musicxml-interfaces';\nimport ScoreInfo from './ScoreInfo';\nimport ScoreInput from './ScoreInput';\nimport { LyricMap } from '../lib/lyricmap';\nimport { mapTextLyrics, parseScorePromise } from '../lib/musicxml';\nimport ScoreResult from './ScoreResult';\nimport ScoreParsing from './ScoreParsing';\nimport Header from './Header';\nimport Footer from './Footer';\n\ninterface MainProps {}\nconst Main: React.FC<MainProps> = () => {\n  const [inputXml, setInputXml] = React.useState<string>('');\n  const [parsing, setParsing] = React.useState(false);\n  const [isError, setIsError] = React.useState(false);\n  const [score, setScore] = React.useState<ScoreTimewise | null>(null);\n  const [resultXml, setResultXml] = React.useState<string>('');\n\n  const parseXml = (text: string) => {\n    setInputXml(text);\n    setParsing(true);\n    parseScorePromise(text)\n      .then(result => {\n        setScore(result);\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setParsing(false);\n      });\n  };\n\n  const onMap = (mapper: LyricMap) => {\n    if (!score) return;\n    setResultXml(mapTextLyrics(inputXml, mapper));\n  };\n\n  const onError = React.useCallback(() => {\n    setIsError(true);\n    setScore(null);\n  }, []);\n\n  const onReset = React.useCallback(() => {\n    setIsError(false);\n    setScore(null);\n    setInputXml('');\n    setResultXml('');\n    setParsing(false);\n  }, []);\n\n  return (\n    <Container>\n      <Header />\n      <MainWrapper>\n        {score === null && <ScoreInput onParse={parseXml} isError={isError} />}\n        {score === null && parsing && <ScoreParsing />}\n        {score !== null && (\n          <ScoreInfo score={score} onMap={onMap} onError={onError} />\n        )}\n        {resultXml && <ScoreResult resultXml={resultXml} />}\n        <ResetButton variant='contained' color='primary' onClick={onReset}>\n          リセット\n        </ResetButton>\n      </MainWrapper>\n\n      <Footer />\n    </Container>\n  );\n};\n\nconst MainWrapper = styled.div`\n  width: 50rem;\n  max-width: 100vw;\n  margin: 5rem auto 0;\n\n  text-align: center;\n`;\n\nconst ResetButton = styled(Button)`\n  margin-top: 1rem;\n`;\n\nexport default Main;\n","import React from 'react';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}